/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.gen.PasswordCrackerWorkerService;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-12-03")
public class PasswordCrackerWorkerService {

  public interface Iface {

    public String startFindPasswordInRange(long rangeBegin, long rangeEnd, String encryptedPassword) throws TException;

    public void reportTermination(String jobId) throws TException;

  }

  public interface AsyncIface {

    public void startFindPasswordInRange(long rangeBegin, long rangeEnd, String encryptedPassword, AsyncMethodCallback resultHandler) throws TException;

    public void reportTermination(String jobId, AsyncMethodCallback resultHandler) throws TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public String startFindPasswordInRange(long rangeBegin, long rangeEnd, String encryptedPassword) throws TException
    {
      send_startFindPasswordInRange(rangeBegin, rangeEnd, encryptedPassword);
      return recv_startFindPasswordInRange();
    }

    public void send_startFindPasswordInRange(long rangeBegin, long rangeEnd, String encryptedPassword) throws TException
    {
      startFindPasswordInRange_args args = new startFindPasswordInRange_args();
      args.setRangeBegin(rangeBegin);
      args.setRangeEnd(rangeEnd);
      args.setEncryptedPassword(encryptedPassword);
      sendBase("startFindPasswordInRange", args);
    }

    public String recv_startFindPasswordInRange() throws TException
    {
      startFindPasswordInRange_result result = new startFindPasswordInRange_result();
      receiveBase(result, "startFindPasswordInRange");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "startFindPasswordInRange failed: unknown result");
    }

    public void reportTermination(String jobId) throws TException
    {
      send_reportTermination(jobId);
      recv_reportTermination();
    }

    public void send_reportTermination(String jobId) throws TException
    {
      reportTermination_args args = new reportTermination_args();
      args.setJobId(jobId);
      sendBase("reportTermination", args);
    }

    public void recv_reportTermination() throws TException
    {
      reportTermination_result result = new reportTermination_result();
      receiveBase(result, "reportTermination");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void startFindPasswordInRange(long rangeBegin, long rangeEnd, String encryptedPassword, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      startFindPasswordInRange_call method_call = new startFindPasswordInRange_call(rangeBegin, rangeEnd, encryptedPassword, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class startFindPasswordInRange_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long rangeBegin;
      private long rangeEnd;
      private String encryptedPassword;
      public startFindPasswordInRange_call(long rangeBegin, long rangeEnd, String encryptedPassword, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rangeBegin = rangeBegin;
        this.rangeEnd = rangeEnd;
        this.encryptedPassword = encryptedPassword;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("startFindPasswordInRange", org.apache.thrift.protocol.TMessageType.CALL, 0));
        startFindPasswordInRange_args args = new startFindPasswordInRange_args();
        args.setRangeBegin(rangeBegin);
        args.setRangeEnd(rangeEnd);
        args.setEncryptedPassword(encryptedPassword);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_startFindPasswordInRange();
      }
    }

    public void reportTermination(String jobId, AsyncMethodCallback resultHandler) throws TException {
      checkReady();
      reportTermination_call method_call = new reportTermination_call(jobId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reportTermination_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String jobId;
      public reportTermination_call(String jobId, AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.jobId = jobId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reportTermination", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reportTermination_args args = new reportTermination_args();
        args.setJobId(jobId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_reportTermination();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("startFindPasswordInRange", new startFindPasswordInRange());
      processMap.put("reportTermination", new reportTermination());
      return processMap;
    }

    public static class startFindPasswordInRange<I extends Iface> extends org.apache.thrift.ProcessFunction<I, startFindPasswordInRange_args> {
      public startFindPasswordInRange() {
        super("startFindPasswordInRange");
      }

      public startFindPasswordInRange_args getEmptyArgsInstance() {
        return new startFindPasswordInRange_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public startFindPasswordInRange_result getResult(I iface, startFindPasswordInRange_args args) throws TException {
        startFindPasswordInRange_result result = new startFindPasswordInRange_result();
        result.success = iface.startFindPasswordInRange(args.rangeBegin, args.rangeEnd, args.encryptedPassword);
        return result;
      }
    }

    public static class reportTermination<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reportTermination_args> {
      public reportTermination() {
        super("reportTermination");
      }

      public reportTermination_args getEmptyArgsInstance() {
        return new reportTermination_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reportTermination_result getResult(I iface, reportTermination_args args) throws TException {
        reportTermination_result result = new reportTermination_result();
        iface.reportTermination(args.jobId);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("startFindPasswordInRange", new startFindPasswordInRange());
      processMap.put("reportTermination", new reportTermination());
      return processMap;
    }

    public static class startFindPasswordInRange<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, startFindPasswordInRange_args, String> {
      public startFindPasswordInRange() {
        super("startFindPasswordInRange");
      }

      public startFindPasswordInRange_args getEmptyArgsInstance() {
        return new startFindPasswordInRange_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            startFindPasswordInRange_result result = new startFindPasswordInRange_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            startFindPasswordInRange_result result = new startFindPasswordInRange_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, startFindPasswordInRange_args args, AsyncMethodCallback<String> resultHandler) throws TException {
        iface.startFindPasswordInRange(args.rangeBegin, args.rangeEnd, args.encryptedPassword,resultHandler);
      }
    }

    public static class reportTermination<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reportTermination_args, Void> {
      public reportTermination() {
        super("reportTermination");
      }

      public reportTermination_args getEmptyArgsInstance() {
        return new reportTermination_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            reportTermination_result result = new reportTermination_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reportTermination_result result = new reportTermination_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reportTermination_args args, AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.reportTermination(args.jobId,resultHandler);
      }
    }

  }

  public static class startFindPasswordInRange_args implements org.apache.thrift.TBase<startFindPasswordInRange_args, startFindPasswordInRange_args._Fields>, java.io.Serializable, Cloneable, Comparable<startFindPasswordInRange_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startFindPasswordInRange_args");

    private static final org.apache.thrift.protocol.TField RANGE_BEGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("rangeBegin", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField RANGE_END_FIELD_DESC = new org.apache.thrift.protocol.TField("rangeEnd", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField ENCRYPTED_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("encryptedPassword", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startFindPasswordInRange_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startFindPasswordInRange_argsTupleSchemeFactory());
    }

    public long rangeBegin; // required
    public long rangeEnd; // required
    public String encryptedPassword; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RANGE_BEGIN((short)1, "rangeBegin"),
      RANGE_END((short)2, "rangeEnd"),
      ENCRYPTED_PASSWORD((short)3, "encryptedPassword");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RANGE_BEGIN
            return RANGE_BEGIN;
          case 2: // RANGE_END
            return RANGE_END;
          case 3: // ENCRYPTED_PASSWORD
            return ENCRYPTED_PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RANGEBEGIN_ISSET_ID = 0;
    private static final int __RANGEEND_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RANGE_BEGIN, new org.apache.thrift.meta_data.FieldMetaData("rangeBegin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "long")));
      tmpMap.put(_Fields.RANGE_END, new org.apache.thrift.meta_data.FieldMetaData("rangeEnd", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "long")));
      tmpMap.put(_Fields.ENCRYPTED_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("encryptedPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startFindPasswordInRange_args.class, metaDataMap);
    }

    public startFindPasswordInRange_args() {
    }

    public startFindPasswordInRange_args(
      long rangeBegin,
      long rangeEnd,
      String encryptedPassword)
    {
      this();
      this.rangeBegin = rangeBegin;
      setRangeBeginIsSet(true);
      this.rangeEnd = rangeEnd;
      setRangeEndIsSet(true);
      this.encryptedPassword = encryptedPassword;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startFindPasswordInRange_args(startFindPasswordInRange_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.rangeBegin = other.rangeBegin;
      this.rangeEnd = other.rangeEnd;
      if (other.isSetEncryptedPassword()) {
        this.encryptedPassword = other.encryptedPassword;
      }
    }

    public startFindPasswordInRange_args deepCopy() {
      return new startFindPasswordInRange_args(this);
    }

    @Override
    public void clear() {
      setRangeBeginIsSet(false);
      this.rangeBegin = 0;
      setRangeEndIsSet(false);
      this.rangeEnd = 0;
      this.encryptedPassword = null;
    }

    public long getRangeBegin() {
      return this.rangeBegin;
    }

    public startFindPasswordInRange_args setRangeBegin(long rangeBegin) {
      this.rangeBegin = rangeBegin;
      setRangeBeginIsSet(true);
      return this;
    }

    public void unsetRangeBegin() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RANGEBEGIN_ISSET_ID);
    }

    /** Returns true if field rangeBegin is set (has been assigned a value) and false otherwise */
    public boolean isSetRangeBegin() {
      return EncodingUtils.testBit(__isset_bitfield, __RANGEBEGIN_ISSET_ID);
    }

    public void setRangeBeginIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RANGEBEGIN_ISSET_ID, value);
    }

    public long getRangeEnd() {
      return this.rangeEnd;
    }

    public startFindPasswordInRange_args setRangeEnd(long rangeEnd) {
      this.rangeEnd = rangeEnd;
      setRangeEndIsSet(true);
      return this;
    }

    public void unsetRangeEnd() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RANGEEND_ISSET_ID);
    }

    /** Returns true if field rangeEnd is set (has been assigned a value) and false otherwise */
    public boolean isSetRangeEnd() {
      return EncodingUtils.testBit(__isset_bitfield, __RANGEEND_ISSET_ID);
    }

    public void setRangeEndIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RANGEEND_ISSET_ID, value);
    }

    public String getEncryptedPassword() {
      return this.encryptedPassword;
    }

    public startFindPasswordInRange_args setEncryptedPassword(String encryptedPassword) {
      this.encryptedPassword = encryptedPassword;
      return this;
    }

    public void unsetEncryptedPassword() {
      this.encryptedPassword = null;
    }

    /** Returns true if field encryptedPassword is set (has been assigned a value) and false otherwise */
    public boolean isSetEncryptedPassword() {
      return this.encryptedPassword != null;
    }

    public void setEncryptedPasswordIsSet(boolean value) {
      if (!value) {
        this.encryptedPassword = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RANGE_BEGIN:
        if (value == null) {
          unsetRangeBegin();
        } else {
          setRangeBegin((Long)value);
        }
        break;

      case RANGE_END:
        if (value == null) {
          unsetRangeEnd();
        } else {
          setRangeEnd((Long)value);
        }
        break;

      case ENCRYPTED_PASSWORD:
        if (value == null) {
          unsetEncryptedPassword();
        } else {
          setEncryptedPassword((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RANGE_BEGIN:
        return getRangeBegin();

      case RANGE_END:
        return getRangeEnd();

      case ENCRYPTED_PASSWORD:
        return getEncryptedPassword();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RANGE_BEGIN:
        return isSetRangeBegin();
      case RANGE_END:
        return isSetRangeEnd();
      case ENCRYPTED_PASSWORD:
        return isSetEncryptedPassword();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startFindPasswordInRange_args)
        return this.equals((startFindPasswordInRange_args)that);
      return false;
    }

    public boolean equals(startFindPasswordInRange_args that) {
      if (that == null)
        return false;

      boolean this_present_rangeBegin = true;
      boolean that_present_rangeBegin = true;
      if (this_present_rangeBegin || that_present_rangeBegin) {
        if (!(this_present_rangeBegin && that_present_rangeBegin))
          return false;
        if (this.rangeBegin != that.rangeBegin)
          return false;
      }

      boolean this_present_rangeEnd = true;
      boolean that_present_rangeEnd = true;
      if (this_present_rangeEnd || that_present_rangeEnd) {
        if (!(this_present_rangeEnd && that_present_rangeEnd))
          return false;
        if (this.rangeEnd != that.rangeEnd)
          return false;
      }

      boolean this_present_encryptedPassword = true && this.isSetEncryptedPassword();
      boolean that_present_encryptedPassword = true && that.isSetEncryptedPassword();
      if (this_present_encryptedPassword || that_present_encryptedPassword) {
        if (!(this_present_encryptedPassword && that_present_encryptedPassword))
          return false;
        if (!this.encryptedPassword.equals(that.encryptedPassword))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_rangeBegin = true;
      list.add(present_rangeBegin);
      if (present_rangeBegin)
        list.add(rangeBegin);

      boolean present_rangeEnd = true;
      list.add(present_rangeEnd);
      if (present_rangeEnd)
        list.add(rangeEnd);

      boolean present_encryptedPassword = true && (isSetEncryptedPassword());
      list.add(present_encryptedPassword);
      if (present_encryptedPassword)
        list.add(encryptedPassword);

      return list.hashCode();
    }

    @Override
    public int compareTo(startFindPasswordInRange_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRangeBegin()).compareTo(other.isSetRangeBegin());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRangeBegin()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rangeBegin, other.rangeBegin);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRangeEnd()).compareTo(other.isSetRangeEnd());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRangeEnd()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rangeEnd, other.rangeEnd);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEncryptedPassword()).compareTo(other.isSetEncryptedPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEncryptedPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encryptedPassword, other.encryptedPassword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startFindPasswordInRange_args(");
      boolean first = true;

      sb.append("rangeBegin:");
      sb.append(this.rangeBegin);
      first = false;
      if (!first) sb.append(", ");
      sb.append("rangeEnd:");
      sb.append(this.rangeEnd);
      first = false;
      if (!first) sb.append(", ");
      sb.append("encryptedPassword:");
      if (this.encryptedPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.encryptedPassword);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startFindPasswordInRange_argsStandardSchemeFactory implements SchemeFactory {
      public startFindPasswordInRange_argsStandardScheme getScheme() {
        return new startFindPasswordInRange_argsStandardScheme();
      }
    }

    private static class startFindPasswordInRange_argsStandardScheme extends StandardScheme<startFindPasswordInRange_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startFindPasswordInRange_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RANGE_BEGIN
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.rangeBegin = iprot.readI64();
                struct.setRangeBeginIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RANGE_END
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.rangeEnd = iprot.readI64();
                struct.setRangeEndIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ENCRYPTED_PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.encryptedPassword = iprot.readString();
                struct.setEncryptedPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startFindPasswordInRange_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(RANGE_BEGIN_FIELD_DESC);
        oprot.writeI64(struct.rangeBegin);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(RANGE_END_FIELD_DESC);
        oprot.writeI64(struct.rangeEnd);
        oprot.writeFieldEnd();
        if (struct.encryptedPassword != null) {
          oprot.writeFieldBegin(ENCRYPTED_PASSWORD_FIELD_DESC);
          oprot.writeString(struct.encryptedPassword);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startFindPasswordInRange_argsTupleSchemeFactory implements SchemeFactory {
      public startFindPasswordInRange_argsTupleScheme getScheme() {
        return new startFindPasswordInRange_argsTupleScheme();
      }
    }

    private static class startFindPasswordInRange_argsTupleScheme extends TupleScheme<startFindPasswordInRange_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startFindPasswordInRange_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRangeBegin()) {
          optionals.set(0);
        }
        if (struct.isSetRangeEnd()) {
          optionals.set(1);
        }
        if (struct.isSetEncryptedPassword()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetRangeBegin()) {
          oprot.writeI64(struct.rangeBegin);
        }
        if (struct.isSetRangeEnd()) {
          oprot.writeI64(struct.rangeEnd);
        }
        if (struct.isSetEncryptedPassword()) {
          oprot.writeString(struct.encryptedPassword);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startFindPasswordInRange_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.rangeBegin = iprot.readI64();
          struct.setRangeBeginIsSet(true);
        }
        if (incoming.get(1)) {
          struct.rangeEnd = iprot.readI64();
          struct.setRangeEndIsSet(true);
        }
        if (incoming.get(2)) {
          struct.encryptedPassword = iprot.readString();
          struct.setEncryptedPasswordIsSet(true);
        }
      }
    }

  }

  public static class startFindPasswordInRange_result implements org.apache.thrift.TBase<startFindPasswordInRange_result, startFindPasswordInRange_result._Fields>, java.io.Serializable, Cloneable, Comparable<startFindPasswordInRange_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startFindPasswordInRange_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startFindPasswordInRange_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startFindPasswordInRange_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startFindPasswordInRange_result.class, metaDataMap);
    }

    public startFindPasswordInRange_result() {
    }

    public startFindPasswordInRange_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startFindPasswordInRange_result(startFindPasswordInRange_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public startFindPasswordInRange_result deepCopy() {
      return new startFindPasswordInRange_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public startFindPasswordInRange_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startFindPasswordInRange_result)
        return this.equals((startFindPasswordInRange_result)that);
      return false;
    }

    public boolean equals(startFindPasswordInRange_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(startFindPasswordInRange_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startFindPasswordInRange_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startFindPasswordInRange_resultStandardSchemeFactory implements SchemeFactory {
      public startFindPasswordInRange_resultStandardScheme getScheme() {
        return new startFindPasswordInRange_resultStandardScheme();
      }
    }

    private static class startFindPasswordInRange_resultStandardScheme extends StandardScheme<startFindPasswordInRange_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startFindPasswordInRange_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startFindPasswordInRange_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startFindPasswordInRange_resultTupleSchemeFactory implements SchemeFactory {
      public startFindPasswordInRange_resultTupleScheme getScheme() {
        return new startFindPasswordInRange_resultTupleScheme();
      }
    }

    private static class startFindPasswordInRange_resultTupleScheme extends TupleScheme<startFindPasswordInRange_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startFindPasswordInRange_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startFindPasswordInRange_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class reportTermination_args implements org.apache.thrift.TBase<reportTermination_args, reportTermination_args._Fields>, java.io.Serializable, Cloneable, Comparable<reportTermination_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reportTermination_args");

    private static final org.apache.thrift.protocol.TField JOB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jobId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reportTermination_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reportTermination_argsTupleSchemeFactory());
    }

    public String jobId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      JOB_ID((short)1, "jobId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // JOB_ID
            return JOB_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.JOB_ID, new org.apache.thrift.meta_data.FieldMetaData("jobId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reportTermination_args.class, metaDataMap);
    }

    public reportTermination_args() {
    }

    public reportTermination_args(
      String jobId)
    {
      this();
      this.jobId = jobId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reportTermination_args(reportTermination_args other) {
      if (other.isSetJobId()) {
        this.jobId = other.jobId;
      }
    }

    public reportTermination_args deepCopy() {
      return new reportTermination_args(this);
    }

    @Override
    public void clear() {
      this.jobId = null;
    }

    public String getJobId() {
      return this.jobId;
    }

    public reportTermination_args setJobId(String jobId) {
      this.jobId = jobId;
      return this;
    }

    public void unsetJobId() {
      this.jobId = null;
    }

    /** Returns true if field jobId is set (has been assigned a value) and false otherwise */
    public boolean isSetJobId() {
      return this.jobId != null;
    }

    public void setJobIdIsSet(boolean value) {
      if (!value) {
        this.jobId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case JOB_ID:
        if (value == null) {
          unsetJobId();
        } else {
          setJobId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case JOB_ID:
        return getJobId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case JOB_ID:
        return isSetJobId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reportTermination_args)
        return this.equals((reportTermination_args)that);
      return false;
    }

    public boolean equals(reportTermination_args that) {
      if (that == null)
        return false;

      boolean this_present_jobId = true && this.isSetJobId();
      boolean that_present_jobId = true && that.isSetJobId();
      if (this_present_jobId || that_present_jobId) {
        if (!(this_present_jobId && that_present_jobId))
          return false;
        if (!this.jobId.equals(that.jobId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_jobId = true && (isSetJobId());
      list.add(present_jobId);
      if (present_jobId)
        list.add(jobId);

      return list.hashCode();
    }

    @Override
    public int compareTo(reportTermination_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetJobId()).compareTo(other.isSetJobId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJobId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobId, other.jobId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reportTermination_args(");
      boolean first = true;

      sb.append("jobId:");
      if (this.jobId == null) {
        sb.append("null");
      } else {
        sb.append(this.jobId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reportTermination_argsStandardSchemeFactory implements SchemeFactory {
      public reportTermination_argsStandardScheme getScheme() {
        return new reportTermination_argsStandardScheme();
      }
    }

    private static class reportTermination_argsStandardScheme extends StandardScheme<reportTermination_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reportTermination_args struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // JOB_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jobId = iprot.readString();
                struct.setJobIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reportTermination_args struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.jobId != null) {
          oprot.writeFieldBegin(JOB_ID_FIELD_DESC);
          oprot.writeString(struct.jobId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reportTermination_argsTupleSchemeFactory implements SchemeFactory {
      public reportTermination_argsTupleScheme getScheme() {
        return new reportTermination_argsTupleScheme();
      }
    }

    private static class reportTermination_argsTupleScheme extends TupleScheme<reportTermination_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reportTermination_args struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetJobId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetJobId()) {
          oprot.writeString(struct.jobId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reportTermination_args struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.jobId = iprot.readString();
          struct.setJobIdIsSet(true);
        }
      }
    }

  }

  public static class reportTermination_result implements org.apache.thrift.TBase<reportTermination_result, reportTermination_result._Fields>, java.io.Serializable, Cloneable, Comparable<reportTermination_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reportTermination_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reportTermination_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reportTermination_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reportTermination_result.class, metaDataMap);
    }

    public reportTermination_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reportTermination_result(reportTermination_result other) {
    }

    public reportTermination_result deepCopy() {
      return new reportTermination_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reportTermination_result)
        return this.equals((reportTermination_result)that);
      return false;
    }

    public boolean equals(reportTermination_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(reportTermination_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reportTermination_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reportTermination_resultStandardSchemeFactory implements SchemeFactory {
      public reportTermination_resultStandardScheme getScheme() {
        return new reportTermination_resultStandardScheme();
      }
    }

    private static class reportTermination_resultStandardScheme extends StandardScheme<reportTermination_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reportTermination_result struct) throws TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reportTermination_result struct) throws TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reportTermination_resultTupleSchemeFactory implements SchemeFactory {
      public reportTermination_resultTupleScheme getScheme() {
        return new reportTermination_resultTupleScheme();
      }
    }

    private static class reportTermination_resultTupleScheme extends TupleScheme<reportTermination_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reportTermination_result struct) throws TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reportTermination_result struct) throws TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
